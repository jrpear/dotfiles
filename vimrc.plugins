if !exists('g:vscode')

" non-vscode compatible tools
packadd! vim-eunuch
packadd! vim-fugitive
packadd! vim-sleuth
packadd! vim-highlightedyank
packadd! fzf
packadd! fzf.vim
packadd! info.vim
packadd! nvim-lspconfig

" IDE-like tools that are a hassle
" - vdebug
" - ale

" To try
" - vim-gitgutter

endif

lua <<EOF
local opts = { noremap=true, silent=true }
vim.api.nvim_set_keymap('n', '<space>e', '<cmd>lua vim.diagnostic.open_float()<CR>', opts)
vim.api.nvim_set_keymap('n', '[d', '<cmd>lua vim.diagnostic.goto_prev()<CR>', opts)
vim.api.nvim_set_keymap('n', ']d', '<cmd>lua vim.diagnostic.goto_next()<CR>', opts)
vim.api.nvim_set_keymap('n', '<space>q', '<cmd>lua vim.diagnostic.setloclist()<CR>', opts)

-- Use an on_attach function to only map the following keys
-- after the language server attaches to the current buffer
local on_attach = function(client, bufnr)
  -- Enable completion triggered by <c-x><c-o>
  vim.api.nvim_buf_set_option(bufnr, 'omnifunc', 'v:lua.vim.lsp.omnifunc')

  -- Mappings.
  -- See `:help vim.lsp.*` for documentation on any of the below functions
  vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gD', '<cmd>lua vim.lsp.buf.declaration()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gd', '<cmd>lua vim.lsp.buf.definition()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', 'K', '<cmd>lua vim.lsp.buf.hover()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', '<C-k>', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', '<space>wa', '<cmd>lua vim.lsp.buf.add_workspace_folder()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', '<space>wr', '<cmd>lua vim.lsp.buf.remove_workspace_folder()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', '<space>wl', '<cmd>lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', '<space>D', '<cmd>lua vim.lsp.buf.type_definition()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', '<space>rn', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', '<space>ca', '<cmd>lua vim.lsp.buf.code_action()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', '<space>f', '<cmd>lua vim.lsp.buf.formatting()<CR>', opts)
end

-- Use a loop to conveniently call 'setup' on multiple servers and
-- map buffer local keybindings when the language server attaches
local servers = { 'clangd', 'rust_analyzer', 'pylsp' }
for _, lsp in pairs(servers) do
  require('lspconfig')[lsp].setup {
    on_attach = on_attach,
    flags = {
      -- This will be the default in neovim 0.7+
      debounce_text_changes = 150,
    }
  }
end
EOF


" Disable non-editing features of vimtex
let g:vimtex_compiler_enabled=0
let g:vimtex_complete_enabled=0
let g:vimtex_fold_enabled=0
let g:vimtex_format_enabled=0
let g:vimtex_imaps_enabled=1
let g:vimtex_include_search_enabled=0
let g:vimtex_indent_enabled=0
let g:vimtex_indent_bib_enabled=0
let g:vimtex_matchparen_enabled=1
let g:vimtex_mappings_enabled=1
let g:vimtex_motion_enabled=1
let g:vimtex_quickfix_enabled=0
let g:vimtex_text_obj_enabled=1
let g:vimtex_toc_enabled=0
let g:vimtex_syntax_enabled=0
let g:vimtex_view_enabled=0

" Enable vimtex on unknown tex files
let g:tex_flavor = 'latex'

" Remember decisions on whether to load lvimrc files
let g:localvimrc_persistent=2

" Make EasyMotion even easier
map <Leader> <Plug>(easymotion-prefix)

" For ALE
" let g:ale_disable_lsp=1

" For vdebug
" command Pdb silent !python $PYTHONDBGPPATH -S -d localhost:9000 %:p &
" command -nargs=? -bang Ve python3 debugger.handle_eval('<bang>', <q-args>)

" For vim-highlightedyank
let g:highlightedyank_highlight_duration = 200
